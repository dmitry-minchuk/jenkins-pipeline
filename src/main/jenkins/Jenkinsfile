// Required plugins:  Pipeline, Pipeline Maven Plugin, Docker Pipeline

package main.jenkins

def openlTabletsGitIrl = "https://github.com/openl-tablets/openl-tablets.git"
def openlTestsGitIrl = "https://dev2eisgengit02.exigengroup.com/gitlab/openl/openl-tests.git"
def openlTestsGitCredentials = "GitLab Basic Auth"

class JenkinsNode {
    String nodeLabel
    String ip

    public JenkinsNode(String nodeLabel, String ip) {
        this.nodeLabel = nodeLabel
        this.ip = ip
    }
}

class JenkinsLabel {
    JenkinsNode master = new JenkinsNode("Jenkins_Master", "10.23.172.185")
    JenkinsNode slave1 = new JenkinsNode("Jenkins_Node_1", "10.23.172.198")
    JenkinsNode slave2SAML = new JenkinsNode("Jenkins_Node_2", "10.23.173.33")
}

class Job {
    String suiteName
    Integer appPort
    String imageName
    String containerAppPath
    String nodeToRunOn

    public Job(String suiteName, Integer appPort, String imageName, String containerAppPath, String nodeToRunOn) {
        this.suiteName = suiteName
        this.appPort = appPort
        this.imageName = imageName
        this.containerAppPath = containerAppPath
        this.nodeToRunOn = nodeToRunOn
    }
}

def jenkinsLabel = new JenkinsLabel()
def functionalJobList = [new Job("SmokeStudio/smoke_studio_with_pef", 8082, "webstudio:latest", "", ""),
                         new Job("StudioIssues/studio_issues_with_pef", 8081, "webstudio:latest", "", ""),
                         new Job("RulesEditor/rules_editor_with_pef", 8083, "webstudio:latest", "", ""),
                         new Job("Repository/repository_with_pef", 8084, "webstudio:latest", "", ""),
                         new Job("Other/custom_config_tests_1", 8085, "webstudio:latest", "", ""),
                         new Job("Other/custom_config_tests_2", 8086, "webstudio:latest", "", ""),
                         new Job("Other/demo_tests", 8087, "webstudiodemo:latest", "", jenkinsLabel.slave2SAML.nodeLabel),
                         new Job("SmokeService/smoke_service", 8088, "webservice:latest", "", jenkinsLabel.slave2SAML.nodeLabel),
                         new Job("Other/saml_tests", 8089, "webstudio:latest", "", jenkinsLabel.slave2SAML.nodeLabel)]
def jenkinsLabelList = [jenkinsLabel.master.nodeLabel, jenkinsLabel.slave1.nodeLabel, jenkinsLabel.slave2SAML.nodeLabel]
def appBuildNumber

pipeline {
    agent {
        label jenkinsLabel.master.nodeLabel
    }
    environment {
        // All env vars should be declared here and Jenkins System Env Vars should be disabled
        ENVIRONMENT = "openl_jenkins"
        JAVA_HOME = "/usr/lib/jvm/java-11-openjdk-11.0.20.0.8-1.el7_9.x86_64"
        M2_HOME = "/usr/lib/apache-maven-3.6.3"
        PATH = "${env.M2_HOME}/bin:${env.PATH}"
        SELENIUM_SERVER_PORT = "5555"
    }
    parameters {
        choice(name: 'APPLICATION_BRANCH', choices: ['master', '5.27.x'], description: 'Source application branch (openl-tablets)')
        choice(name: 'TESTS_BRANCH', choices: ['master', '5.27.x'], description: 'Autotests branch (openl-tests)')
    }
    stages {
        stage('Build Docker Images') {
            steps {
                script {
                    parallel jenkinsLabelList.collectEntries() { nodeLabel ->
                        [(nodeLabel): {
                            node(nodeLabel) {
                                deleteDir()
                                git url: openlTabletsGitIrl, branch: params.APPLICATION_BRANCH
                                appBuildNumber = env.GIT_COMMIT
                                withMaven {
                                    sh("mvn clean install -DskipTests=true")
                                }
                                docker.build("webstudio:latest", "--no-cache --build-arg APP=STUDIO/org.openl.rules.webstudio/target/webapp .")
                                docker.build("webservice:latest", "--no-cache --build-arg APP=WSFrontend/org.openl.rules.ruleservice.ws.all/target/webapp .")
                                docker.build("webstudiodemo:latest", "--no-cache ./DEMO/")
                            }
                        }]
                    }
                }
            }
        }
        stage('Run Test Suites') {
            steps {
                script {
                    parallel functionalJobList.collectEntries() { suite ->
                        [(suite): {
                            node(suite.nodeToRunOn) {
                                deleteDir()
                                git url: openlTestsGitIrl, branch: params.TESTS_BRANCH, credentialsId: openlTestsGitCredentials
                                env.BUILD_NUMBER = appBuildNumber
                                withMaven(maven: 'M3', mavenSettingsConfig: 'dace3426-e681-4104-b0b0-d0c8cb750226') {
                                    sh("mvn -f TESTS/OpenLAutoTests/pom.xml clean test -Dwebdriver.hub.url=http://${env.HOST_IP}:5555/wd/hub -Dsuite=${suite.suiteName} -Dcontainer.host.ip=${env.HOST_IP} -Dcontainer.port=${suite.appPort} -Dcontainer.app.path=${suite.containerAppPath} -Dimage.name=${suite.imageName} -Dtestng.dtd.http=true")
                                }
                                publishHTML([allowMissing: false,
                                             alwaysLinkToLastBuild: true,
                                             keepAll: true,
                                             reportDir: './TESTS/OpenLAutoTests/target/surefire-reports',
                                             reportFiles: 'index.html',
                                             reportName: 'HTML Report',
                                             reportTitles: '',
                                             useWrapperFileDirectly: true])
                            }
                        }]
                    }
                }
            }
        }
    }
}
